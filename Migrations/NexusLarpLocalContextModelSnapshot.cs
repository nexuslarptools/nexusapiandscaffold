// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NEXUSDataLayerScaffold.Models;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NEXUSDataLayerScaffold.Migrations
{
    [DbContext(typeof(NexusLarpLocalContext))]
    partial class NexusLarpLocalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.CharacterSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Createdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("CreatedbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("createdbyuser_guid");

                    b.Property<Guid?>("EditbyUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("editby_user_guid");

                    b.Property<JsonDocument>("Fields")
                        .HasColumnType("jsonb")
                        .HasColumnName("fields");

                    b.Property<Guid?>("FirstapprovalbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("firstapprovalbyuser_guid");

                    b.Property<DateTime?>("Firstapprovaldate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("firstapprovaldate");

                    b.Property<string>("Gmnotes")
                        .HasMaxLength(100000)
                        .HasColumnType("character varying(100000)")
                        .HasColumnName("gmnotes");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<string>("Img1")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("img1");

                    b.Property<string>("Img2")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("img2");

                    b.Property<bool>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("name");

                    b.Property<bool>("Readyforapproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("readyforapproval");

                    b.Property<string>("Reason4edit")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("reason4edit");

                    b.Property<Guid?>("SecondapprovalbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("secondapprovalbyuser_guid");

                    b.Property<DateTime?>("Secondapprovaldate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("secondapprovaldate");

                    b.Property<Guid>("Seriesguid")
                        .HasColumnType("uuid")
                        .HasColumnName("seriesguid");

                    b.Property<string>("Taglists")
                        .HasColumnType("json")
                        .HasColumnName("taglists");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("csheet_guid");

                    b.HasIndex("CreatedbyuserGuid");

                    b.HasIndex("EditbyUserGuid");

                    b.HasIndex("FirstapprovalbyuserGuid");

                    b.HasIndex("SecondapprovalbyuserGuid");

                    b.HasIndex("Seriesguid");

                    b.ToTable("CharacterSheet", (string)null);
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.CharacterSheetApproved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharactersheetId")
                        .HasColumnType("integer")
                        .HasColumnName("charactersheet_id");

                    b.Property<DateTime>("Createdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("CreatedbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("createdbyuser_guid");

                    b.Property<Guid?>("EditbyUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("editby_user_guid");

                    b.Property<JsonDocument>("Fields")
                        .HasColumnType("jsonb")
                        .HasColumnName("fields");

                    b.Property<Guid?>("FirstapprovalbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("firstapprovalbyuser_guid");

                    b.Property<DateTime?>("Firstapprovaldate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("firstapprovaldate");

                    b.Property<string>("Gmnotes")
                        .HasMaxLength(100000)
                        .HasColumnType("character varying(100000)")
                        .HasColumnName("gmnotes");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("Img1")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("img1");

                    b.Property<string>("Img2")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("img2");

                    b.Property<bool>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("name");

                    b.Property<string>("Reason4edit")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("reason4edit");

                    b.Property<Guid?>("SecondapprovalbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("secondapprovalbyuser_guid");

                    b.Property<DateTime?>("Secondapprovaldate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("secondapprovaldate");

                    b.Property<Guid?>("Seriesguid")
                        .HasColumnType("uuid")
                        .HasColumnName("seriesguid");

                    b.Property<string>("Taglists")
                        .HasColumnType("json")
                        .HasColumnName("taglists");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("csheetapprov_guid");

                    b.HasIndex("CharactersheetId");

                    b.HasIndex("CreatedbyuserGuid");

                    b.HasIndex("EditbyUserGuid");

                    b.HasIndex("FirstapprovalbyuserGuid");

                    b.HasIndex("SecondapprovalbyuserGuid");

                    b.HasIndex("Seriesguid");

                    b.ToTable("CharacterSheetApproved", (string)null);
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.CharacterSheetApprovedTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharactersheetapprovedId")
                        .HasColumnType("integer")
                        .HasColumnName("charactersheetapproved_id");

                    b.Property<Guid>("TagGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_guid");

                    b.HasKey("Id")
                        .HasName("charactersheetapprovedtags_id");

                    b.HasIndex("CharactersheetapprovedId");

                    b.HasIndex("TagGuid");

                    b.ToTable("CharacterSheetApprovedTags");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.CharacterSheetMessageAck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharactersheetreviewmessagesId")
                        .HasColumnType("integer")
                        .HasColumnName("charactersheetreviewmessages_id");

                    b.Property<bool>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<DateTime?>("Seendate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("seendate");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("user_guid");

                    b.HasKey("Id")
                        .HasName("charactersheetmessageacks_id");

                    b.HasIndex("CharactersheetreviewmessagesId");

                    b.HasIndex("UserGuid");

                    b.ToTable("CharacterSheetMessageAcks");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.CharacterSheetReviewMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharactersheetId")
                        .HasColumnType("integer")
                        .HasColumnName("charactersheet_id");

                    b.Property<DateTime>("Createdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("CreatedbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("createdbyuser_guid");

                    b.Property<bool?>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<string>("Message")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("message");

                    b.HasKey("Id")
                        .HasName("charactersheetreviewmessages_id");

                    b.HasIndex("CreatedbyuserGuid");

                    b.ToTable("CharacterSheetReviewMessages");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.CharacterSheetReviewSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CharactersheetGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("charactersheet_guid");

                    b.Property<DateTime>("Createdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("Stopdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("stopdate");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("user_guid");

                    b.HasKey("Id")
                        .HasName("charactersheetreviewsubscriptions_id");

                    b.HasIndex("UserGuid");

                    b.ToTable("CharacterSheetReviewSubscriptions");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.CharacterSheetTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharactersheetId")
                        .HasColumnType("integer")
                        .HasColumnName("charactersheet_id");

                    b.Property<Guid>("TagGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_guid");

                    b.HasKey("Id")
                        .HasName("charactersheettags_id");

                    b.HasIndex("CharactersheetId");

                    b.HasIndex("TagGuid");

                    b.ToTable("CharacterSheetTags");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.CharacterSheetVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharactersheetId")
                        .HasColumnType("integer")
                        .HasColumnName("charactersheet_id");

                    b.Property<DateTime>("Createdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("CreatedbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("createdbyuser_guid");

                    b.Property<JsonDocument>("Fields")
                        .HasColumnType("jsonb")
                        .HasColumnName("fields");

                    b.Property<Guid?>("FirstapprovalbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("firstapprovalbyuser_guid");

                    b.Property<DateTime?>("Firstapprovaldate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("firstapprovaldate");

                    b.Property<string>("Gmnotes")
                        .HasMaxLength(100000)
                        .HasColumnType("character varying(100000)")
                        .HasColumnName("gmnotes");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("Img1")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("img1");

                    b.Property<string>("Img2")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("img2");

                    b.Property<bool>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("name");

                    b.Property<string>("Reason4edit")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("reason4edit");

                    b.Property<Guid?>("SecondapprovalbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("secondapprovalbyuser_guid");

                    b.Property<DateTime?>("Secondapprovaldate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("secondapprovaldate");

                    b.Property<Guid?>("Seriesguid")
                        .HasColumnType("uuid")
                        .HasColumnName("seriesguid");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("csheetvers_guid");

                    b.HasIndex("CharactersheetId");

                    b.HasIndex("CreatedbyuserGuid");

                    b.HasIndex("FirstapprovalbyuserGuid");

                    b.HasIndex("SecondapprovalbyuserGuid");

                    b.HasIndex("Seriesguid");

                    b.ToTable("CharacterSheetVersion", (string)null);
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.ItemSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Createdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("CreatedbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("createdbyuser_guid");

                    b.Property<Guid?>("EditbyUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("editby_user_guid");

                    b.Property<JsonDocument>("Fields")
                        .HasColumnType("jsonb")
                        .HasColumnName("fields");

                    b.Property<JsonDocument>("Fields2ndside")
                        .HasColumnType("jsonb")
                        .HasColumnName("fields2ndside");

                    b.Property<Guid?>("FirstapprovalbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("firstapprovalbyuser_guid");

                    b.Property<DateTime?>("Firstapprovaldate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("firstapprovaldate");

                    b.Property<string>("Gmnotes")
                        .HasMaxLength(1000000)
                        .HasColumnType("character varying(1000000)")
                        .HasColumnName("gmnotes");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<string>("Img1")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("img1");

                    b.Property<bool>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool?>("Isdoubleside")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isdoubleside");

                    b.Property<Guid?>("ItemtypeGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("itemtype_guid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("name");

                    b.Property<bool>("Readyforapproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("readyforapproval");

                    b.Property<string>("Reason4edit")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("reason4edit");

                    b.Property<Guid?>("SecondapprovalbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("secondapprovalbyuser_guid");

                    b.Property<DateTime?>("Secondapprovaldate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("secondapprovaldate");

                    b.Property<Guid?>("Seriesguid")
                        .HasColumnType("uuid")
                        .HasColumnName("seriesguid");

                    b.Property<string>("Taglists")
                        .HasColumnType("json")
                        .HasColumnName("taglists");

                    b.Property<int?>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("isheet_guid");

                    b.HasIndex("CreatedbyuserGuid");

                    b.HasIndex("EditbyUserGuid");

                    b.HasIndex("FirstapprovalbyuserGuid");

                    b.HasIndex("ItemtypeGuid");

                    b.HasIndex("SecondapprovalbyuserGuid");

                    b.HasIndex("Seriesguid");

                    b.HasIndex(new[] { "Isactive" }, "items_active");

                    b.ToTable("ItemSheet", (string)null);
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.ItemSheetApproved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Createdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("CreatedbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("createdbyuser_guid");

                    b.Property<Guid?>("EditbyUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("editby_user_guid");

                    b.Property<JsonDocument>("Fields")
                        .HasColumnType("jsonb")
                        .HasColumnName("fields");

                    b.Property<JsonDocument>("Fields2ndside")
                        .HasColumnType("jsonb")
                        .HasColumnName("fields2ndside");

                    b.Property<Guid?>("FirstapprovalbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("firstapprovalbyuser_guid");

                    b.Property<DateTime?>("Firstapprovaldate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("firstapprovaldate");

                    b.Property<string>("Gmnotes")
                        .HasMaxLength(1000000)
                        .HasColumnType("character varying(1000000)")
                        .HasColumnName("gmnotes");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<string>("Img1")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("img1");

                    b.Property<bool>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool?>("Isdoubleside")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isdoubleside");

                    b.Property<int>("ItemsheetId")
                        .HasColumnType("integer")
                        .HasColumnName("itemsheet_id");

                    b.Property<Guid?>("ItemtypeGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("itemtype_guid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("name");

                    b.Property<string>("Reason4edit")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("reason4edit");

                    b.Property<Guid?>("SecondapprovalbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("secondapprovalbyuser_guid");

                    b.Property<DateTime?>("Secondapprovaldate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("secondapprovaldate");

                    b.Property<Guid?>("Seriesguid")
                        .HasColumnType("uuid")
                        .HasColumnName("seriesguid");

                    b.Property<string>("Taglists")
                        .HasColumnType("json")
                        .HasColumnName("taglists");

                    b.Property<int?>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("isheetapp_guid");

                    b.HasIndex("CreatedbyuserGuid");

                    b.HasIndex("EditbyUserGuid");

                    b.HasIndex("FirstapprovalbyuserGuid");

                    b.HasIndex("ItemtypeGuid");

                    b.HasIndex("SecondapprovalbyuserGuid");

                    b.HasIndex("Seriesguid");

                    b.ToTable("ItemSheetApproved", (string)null);
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.ItemSheetApprovedTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemsheetapprovedId")
                        .HasColumnType("integer")
                        .HasColumnName("itemsheetapproved_id");

                    b.Property<Guid>("TagGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_guid");

                    b.HasKey("Id")
                        .HasName("itemsheetapprovedtags_id");

                    b.HasIndex("ItemsheetapprovedId");

                    b.HasIndex("TagGuid");

                    b.ToTable("ItemSheetApprovedTags");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.ItemSheetMessageAck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<int>("ItemsheetreviewmessagesId")
                        .HasColumnType("integer")
                        .HasColumnName("itemsheetreviewmessages_id");

                    b.Property<DateTime?>("Seendate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("seendate");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("user_guid");

                    b.HasKey("Id")
                        .HasName("itemsheetmessageacks_id");

                    b.HasIndex("ItemsheetreviewmessagesId");

                    b.HasIndex("UserGuid");

                    b.ToTable("ItemSheetMessageAcks");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.ItemSheetReviewMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Createdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("CreatedbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("createdbyuser_guid");

                    b.Property<bool?>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<int>("ItemsheetId")
                        .HasColumnType("integer")
                        .HasColumnName("itemsheet_id");

                    b.Property<string>("Message")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("message");

                    b.HasKey("Id")
                        .HasName("itemsheetreviewmessages_id");

                    b.HasIndex("CreatedbyuserGuid");

                    b.ToTable("ItemSheetReviewMessages");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.ItemSheetReviewSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Createdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ItemsheetGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("itemsheet_guid");

                    b.Property<DateTime?>("Stopdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("stopdate");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("user_guid");

                    b.HasKey("Id")
                        .HasName("itemsheetreviewsubscriptions_id");

                    b.HasIndex("UserGuid");

                    b.ToTable("ItemSheetReviewSubscriptions");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.ItemSheetTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemsheetId")
                        .HasColumnType("integer")
                        .HasColumnName("itemsheet_id");

                    b.Property<Guid>("TagGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_guid");

                    b.HasKey("Id")
                        .HasName("itemsheettags_id");

                    b.HasIndex("ItemsheetId");

                    b.HasIndex("TagGuid");

                    b.ToTable("ItemSheetTags");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.ItemSheetVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Createdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("CreatedbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("createdbyuser_guid");

                    b.Property<JsonDocument>("Fields")
                        .HasColumnType("jsonb")
                        .HasColumnName("fields");

                    b.Property<Guid?>("FirstapprovalbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("firstapprovalbyuser_guid");

                    b.Property<DateTime?>("Firstapprovaldate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("firstapprovaldate");

                    b.Property<string>("Gmnotes")
                        .HasMaxLength(1000000)
                        .HasColumnType("character varying(1000000)")
                        .HasColumnName("gmnotes");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<string>("Img1")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("img1");

                    b.Property<bool>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<int>("ItemsheetId")
                        .HasColumnType("integer")
                        .HasColumnName("itemsheet_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("name");

                    b.Property<string>("Reason4edit")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("reason4edit");

                    b.Property<Guid?>("SecondapprovalbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("secondapprovalbyuser_guid");

                    b.Property<DateTime?>("Secondapprovaldate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("secondapprovaldate");

                    b.Property<Guid?>("Seriesguid")
                        .HasColumnType("uuid")
                        .HasColumnName("seriesguid");

                    b.Property<int?>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("isheetvers_guid");

                    b.HasIndex("CreatedbyuserGuid");

                    b.HasIndex("FirstapprovalbyuserGuid");

                    b.HasIndex("SecondapprovalbyuserGuid");

                    b.HasIndex("Seriesguid");

                    b.ToTable("ItemSheetVersion", (string)null);
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.ItemType", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<bool>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<string>("Type")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Guid")
                        .HasName("itemtypes_guid");

                    b.ToTable("ItemTypes");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.ItemUsersContact", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<Guid>("CreatedbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("createdbyuser_guid");

                    b.Property<DateTime?>("Createddate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<Guid>("ItemsheetGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("itemsheet_guid");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("user_guid");

                    b.HasKey("Guid")
                        .HasName("itemusers_contacts_guid");

                    b.HasIndex("CreatedbyuserGuid");

                    b.HasIndex("UserGuid");

                    b.ToTable("ItemUsers_Contacts", (string)null);
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.Larp", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<bool>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<string>("Location")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("name");

                    b.Property<string>("Shortname")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("shortname");

                    b.HasKey("Guid")
                        .HasName("larps_guid");

                    b.ToTable("LARPs", (string)null);
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.LarpplayerCharacterSheetAllowed", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<Guid>("CharactersheetGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("charactersheet_guid");

                    b.Property<DateTime>("Createdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("createdbyuser_guid");

                    b.Property<bool>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<Guid?>("LarpGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("larp_guid");

                    b.HasKey("Guid")
                        .HasName("larpplayercharactersheetallowed_id");

                    b.HasIndex("CreatedbyuserGuid");

                    b.HasIndex("LarpGuid");

                    b.ToTable("LARPPlayerCharacterSheetAllowed", (string)null);
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.LarpplayerCharacterSheetDisllowed", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<Guid>("CharactersheetGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("charactersheet_guid");

                    b.Property<DateTime>("Createdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("createdbyuser_guid");

                    b.Property<bool>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<Guid?>("LarpGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("larp_guid");

                    b.HasKey("Guid")
                        .HasName("larpplayercharactersheetdisllowed_id");

                    b.HasIndex("CreatedbyuserGuid");

                    b.HasIndex("LarpGuid");

                    b.ToTable("LARPPlayerCharacterSheetDisllowed", (string)null);
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.LarpplayerSeriesAllowed", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<DateTime>("Createdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("createdbyuser_guid");

                    b.Property<bool>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<Guid?>("LarpGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("larp_guid");

                    b.Property<Guid>("SeriesGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("series_guid");

                    b.HasKey("Guid")
                        .HasName("larpplayerseriesallowed_id");

                    b.HasIndex("CreatedbyuserGuid");

                    b.HasIndex("LarpGuid");

                    b.HasIndex("SeriesGuid");

                    b.ToTable("LARPPlayerSeriesAllowed", (string)null);
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.LarpplayerSeriesDisllowed", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<DateTime>("Createdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("createdbyuser_guid");

                    b.Property<bool>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<Guid?>("LarpGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("larp_guid");

                    b.Property<Guid>("SeriesGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("series_guid");

                    b.HasKey("Guid")
                        .HasName("larpplayerseriesdisllowed_id");

                    b.HasIndex("CreatedbyuserGuid");

                    b.HasIndex("LarpGuid");

                    b.HasIndex("SeriesGuid");

                    b.ToTable("LARPPlayerSeriesDisllowed", (string)null);
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.LarpplayerTagAllowed", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<DateTime>("Createdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("createdbyuser_guid");

                    b.Property<bool>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<Guid>("LarpGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("larp_guid");

                    b.Property<Guid>("TagGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_guid");

                    b.HasKey("Guid")
                        .HasName("larpplayertagallowed_id");

                    b.HasIndex("CreatedbyuserGuid");

                    b.HasIndex("LarpGuid");

                    b.HasIndex("TagGuid");

                    b.ToTable("LARPPlayerTagAllowed", (string)null);
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.LarpplayerTagDisllowed", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<DateTime>("Createdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("createdbyuser_guid");

                    b.Property<bool>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<Guid>("LarpGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("larp_guid");

                    b.Property<Guid>("TagGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_guid");

                    b.HasKey("Guid")
                        .HasName("larpplayertagdisllowed_id");

                    b.HasIndex("CreatedbyuserGuid");

                    b.HasIndex("LarpGuid");

                    b.HasIndex("TagGuid");

                    b.ToTable("LARPPlayerTagDisllowed", (string)null);
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.Larprun", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<DateTime>("Createdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CreatedbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("createdbyuser_guid");

                    b.Property<bool>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<Guid>("LarpGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("larp_guid");

                    b.Property<DateTime>("Larprunenddate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("larprunenddate");

                    b.Property<DateTime>("Larprunstartdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("larprunstartdate");

                    b.Property<DateTime>("Preregenddate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("preregenddate");

                    b.Property<DateTime>("Preregstartdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("preregstartdate");

                    b.Property<string>("Runname")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("runname");

                    b.HasKey("Guid")
                        .HasName("larpruns_id");

                    b.HasIndex("CreatedbyuserGuid");

                    b.HasIndex("LarpGuid");

                    b.ToTable("LARPRuns", (string)null);
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.LarprunPreReg", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<Guid?>("CharactersheetChoice1")
                        .HasColumnType("uuid")
                        .HasColumnName("charactersheet_choice1");

                    b.Property<Guid?>("CharactersheetChoice2")
                        .HasColumnType("uuid")
                        .HasColumnName("charactersheet_choice2");

                    b.Property<Guid?>("CharactersheetChoice3")
                        .HasColumnType("uuid")
                        .HasColumnName("charactersheet_choice3");

                    b.Property<string>("CharactersheetCustomchoice1")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("charactersheet_customchoice1");

                    b.Property<string>("CharactersheetCustomchoice1Series")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("charactersheet_customchoice1_series");

                    b.Property<string>("CharactersheetCustomchoice2")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("charactersheet_customchoice2");

                    b.Property<string>("CharactersheetCustomchoice2Series")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("charactersheet_customchoice2_series");

                    b.Property<string>("CharactersheetCustomchoice3")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("charactersheet_customchoice3");

                    b.Property<string>("CharactersheetCustomchoice3Series")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("charactersheet_customchoice3_series");

                    b.Property<Guid?>("CharactersheetRegistered")
                        .HasColumnType("uuid")
                        .HasColumnName("charactersheet_registered");

                    b.Property<Guid?>("CharactersheetRegisteredApprovedbyUser")
                        .HasColumnType("uuid")
                        .HasColumnName("charactersheet_registered_approvedby_user");

                    b.Property<bool?>("CharactersheetRegisteredApprovedsheet")
                        .HasColumnType("boolean")
                        .HasColumnName("charactersheet_registered_approvedsheet");

                    b.Property<DateTime>("Createdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<Guid>("LarprunGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("larprun_guid");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("user_guid");

                    b.HasKey("Guid")
                        .HasName("larprunprereg_id");

                    b.HasIndex("CharactersheetRegisteredApprovedbyUser");

                    b.HasIndex("LarprunGuid");

                    b.HasIndex("UserGuid");

                    b.ToTable("LARPRunPreReg", (string)null);
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.Larptag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<Guid?>("Larpguid")
                        .HasColumnType("uuid")
                        .HasColumnName("larpguid");

                    b.Property<Guid?>("Tagguid")
                        .HasColumnType("uuid")
                        .HasColumnName("tagguid");

                    b.HasKey("Id")
                        .HasName("LARPTags_pkey");

                    b.HasIndex("Larpguid");

                    b.HasIndex("Tagguid");

                    b.ToTable("LARPTags", (string)null);
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.Pronoun", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<string>("Pronouns")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("pronouns");

                    b.HasKey("Guid")
                        .HasName("pronouns_guid");

                    b.ToTable("Pronouns");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Ord")
                        .HasColumnType("integer")
                        .HasColumnName("ord");

                    b.Property<string>("Rolename")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("rolename");

                    b.HasKey("Id")
                        .HasName("Roles_pkey");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.Series", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<DateTime>("Createdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("Deactivedate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deactivedate");

                    b.Property<bool>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<JsonDocument>("Tags")
                        .HasColumnType("jsonb")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("title");

                    b.Property<string>("Titlejpn")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("titlejpn");

                    b.HasKey("Guid")
                        .HasName("series_guid");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.SeriesTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("SeriesGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("series_guid");

                    b.Property<Guid>("TagGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_guid");

                    b.HasKey("Id")
                        .HasName("seriestags_id");

                    b.HasIndex("SeriesGuid");

                    b.HasIndex("TagGuid");

                    b.ToTable("SeriesTags");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.SheetUsersContact", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<Guid>("CharactersheetGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("charactersheet_guid");

                    b.Property<Guid>("CreatedbyuserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("createdbyuser_guid");

                    b.Property<DateTime?>("Createddate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createddate");

                    b.Property<bool?>("Isactive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("user_guid");

                    b.HasKey("Guid")
                        .HasName("sheetusers_contacts_guid");

                    b.HasIndex("CreatedbyuserGuid");

                    b.HasIndex("UserGuid");

                    b.ToTable("SheetUsers_Contacts", (string)null);
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.Tag", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<Guid?>("ApprovedbyUserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("approvedby_user_guid");

                    b.Property<bool>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<bool?>("Isapproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isapproved");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("name");

                    b.Property<Guid>("Tagtypeguid")
                        .HasColumnType("uuid")
                        .HasColumnName("tagtypeguid");

                    b.HasKey("Guid")
                        .HasName("tags_guid");

                    b.HasIndex("ApprovedbyUserGuid");

                    b.HasIndex("Tagtypeguid");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.TagType", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("name");

                    b.HasKey("Guid")
                        .HasName("tagtypes_guid");

                    b.ToTable("TagTypes");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.User", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid")
                        .HasDefaultValueSql("uuid_generate_v1()");

                    b.Property<string>("Authid")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("authid");

                    b.Property<string>("Discordname")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("discordname");

                    b.Property<string>("Email")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("firstname");

                    b.Property<bool>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<string>("Lastname")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("lastname");

                    b.Property<string>("Preferredname")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("preferredname");

                    b.Property<Guid?>("Pronounsguid")
                        .HasColumnType("uuid")
                        .HasColumnName("pronounsguid");

                    b.HasKey("Guid")
                        .HasName("users_guid");

                    b.HasIndex("Pronounsguid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.UserLarprole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Isactive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isactive");

                    b.Property<Guid?>("Larpguid")
                        .HasColumnType("uuid")
                        .HasColumnName("larpguid");

                    b.Property<int?>("Roleid")
                        .HasColumnType("integer")
                        .HasColumnName("roleid");

                    b.Property<Guid?>("Userguid")
                        .HasColumnType("uuid")
                        .HasColumnName("userguid");

                    b.HasKey("Id")
                        .HasName("UserLARPRoles_pkey");

                    b.HasIndex("Larpguid");

                    b.HasIndex("Roleid");

                    b.HasIndex("Userguid");

                    b.ToTable("UserLARPRoles", (string)null);
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.CharacterSheet", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Createdbyuser")
                        .WithMany("CharacterSheetCreatedbyusers")
                        .HasForeignKey("CreatedbyuserGuid")
                        .HasConstraintName("CharacterSheet_createdby_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "EditbyUser")
                        .WithMany("CharacterSheetEditbyUsers")
                        .HasForeignKey("EditbyUserGuid")
                        .HasConstraintName("CharacterSheet_editby_user_guid_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Firstapprovalbyuser")
                        .WithMany("CharacterSheetFirstapprovalbyusers")
                        .HasForeignKey("FirstapprovalbyuserGuid")
                        .HasConstraintName("CharacterSheet_firstapprovalby_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Secondapprovalbyuser")
                        .WithMany("CharacterSheetSecondapprovalbyusers")
                        .HasForeignKey("SecondapprovalbyuserGuid")
                        .HasConstraintName("CharacterSheet_secondapprovalby_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Series", "Series")
                        .WithMany("CharacterSheets")
                        .HasForeignKey("Seriesguid")
                        .IsRequired()
                        .HasConstraintName("fk_series_guid");

                    b.Navigation("Createdbyuser");

                    b.Navigation("EditbyUser");

                    b.Navigation("Firstapprovalbyuser");

                    b.Navigation("Secondapprovalbyuser");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.CharacterSheetApproved", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.CharacterSheet", "Charactersheet")
                        .WithMany("CharacterSheetApproveds")
                        .HasForeignKey("CharactersheetId")
                        .IsRequired()
                        .HasConstraintName("CharacterSheetApproved_charactersheet_id_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Createdbyuser")
                        .WithMany("CharacterSheetApprovedCreatedbyusers")
                        .HasForeignKey("CreatedbyuserGuid")
                        .HasConstraintName("CharacterSheetApproved_createdby_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "EditbyUser")
                        .WithMany("CharacterSheetApprovedEditbyUsers")
                        .HasForeignKey("EditbyUserGuid")
                        .HasConstraintName("CharacterSheetApproved_editby_user_guid_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Firstapprovalbyuser")
                        .WithMany("CharacterSheetApprovedFirstapprovalbyusers")
                        .HasForeignKey("FirstapprovalbyuserGuid")
                        .HasConstraintName("CharacterSheetApproved_firstapprovalby_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Secondapprovalbyuser")
                        .WithMany("CharacterSheetApprovedSecondapprovalbyusers")
                        .HasForeignKey("SecondapprovalbyuserGuid")
                        .HasConstraintName("CharacterSheetApproved_secondapprovalby_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Series", "Series")
                        .WithMany("CharacterSheetApproveds")
                        .HasForeignKey("Seriesguid")
                        .HasConstraintName("fk_series_guid");

                    b.Navigation("Charactersheet");

                    b.Navigation("Createdbyuser");

                    b.Navigation("EditbyUser");

                    b.Navigation("Firstapprovalbyuser");

                    b.Navigation("Secondapprovalbyuser");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.CharacterSheetApprovedTag", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.CharacterSheetApproved", "Charactersheetapproved")
                        .WithMany("CharacterSheetApprovedTags")
                        .HasForeignKey("CharactersheetapprovedId")
                        .IsRequired()
                        .HasConstraintName("CharacterSheetApprovedTags_CharacterSheet_Id_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Tag", "Tag")
                        .WithMany("CharacterSheetApprovedTags")
                        .HasForeignKey("TagGuid")
                        .IsRequired()
                        .HasConstraintName("CharacterSheetApprovedTags_Tag_guid");

                    b.Navigation("Charactersheetapproved");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.CharacterSheetMessageAck", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.CharacterSheetReviewMessage", "Charactersheetreviewmessages")
                        .WithMany("CharacterSheetMessageAcks")
                        .HasForeignKey("CharactersheetreviewmessagesId")
                        .IsRequired()
                        .HasConstraintName("CharacterSheetMessageAcks_CharacterSheetReviewMessages_id_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "User")
                        .WithMany("CharacterSheetMessageAcks")
                        .HasForeignKey("UserGuid")
                        .IsRequired()
                        .HasConstraintName("CharacterSheetMessageAcks_user_guid_fkey");

                    b.Navigation("Charactersheetreviewmessages");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.CharacterSheetReviewMessage", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Createdbyuser")
                        .WithMany("CharacterSheetReviewMessages")
                        .HasForeignKey("CreatedbyuserGuid")
                        .HasConstraintName("CharacterSheetReviewMessages_createdbyuser_guid_fkey");

                    b.Navigation("Createdbyuser");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.CharacterSheetReviewSubscription", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "User")
                        .WithMany("CharacterSheetReviewSubscriptions")
                        .HasForeignKey("UserGuid")
                        .IsRequired()
                        .HasConstraintName("CharacterSheetReviewSubscriptions_user_guid_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.CharacterSheetTag", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.CharacterSheet", "Charactersheet")
                        .WithMany("CharacterSheetTags")
                        .HasForeignKey("CharactersheetId")
                        .IsRequired()
                        .HasConstraintName("CharacterSheetTags_CharacterSheet_Id_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Tag", "Tag")
                        .WithMany("CharacterSheetTags")
                        .HasForeignKey("TagGuid")
                        .IsRequired()
                        .HasConstraintName("CharacterSheetTags_Tag_guid");

                    b.Navigation("Charactersheet");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.CharacterSheetVersion", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.CharacterSheet", "Charactersheet")
                        .WithMany("CharacterSheetVersions")
                        .HasForeignKey("CharactersheetId")
                        .IsRequired()
                        .HasConstraintName("CharacterSheetVersion_charactersheet_id_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Createdbyuser")
                        .WithMany("CharacterSheetVersionCreatedbyusers")
                        .HasForeignKey("CreatedbyuserGuid")
                        .HasConstraintName("CharacterSheetVersion_createdby_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Firstapprovalbyuser")
                        .WithMany("CharacterSheetVersionFirstapprovalbyusers")
                        .HasForeignKey("FirstapprovalbyuserGuid")
                        .HasConstraintName("CharacterSheetVersion_firstapprovalby_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Secondapprovalbyuser")
                        .WithMany("CharacterSheetVersionSecondapprovalbyusers")
                        .HasForeignKey("SecondapprovalbyuserGuid")
                        .HasConstraintName("CharacterSheetVersion_secondapprovalby_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Series", "Series")
                        .WithMany("CharacterSheetVersions")
                        .HasForeignKey("Seriesguid")
                        .HasConstraintName("fk_series_guid");

                    b.Navigation("Charactersheet");

                    b.Navigation("Createdbyuser");

                    b.Navigation("Firstapprovalbyuser");

                    b.Navigation("Secondapprovalbyuser");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.ItemSheet", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Createdbyuser")
                        .WithMany("ItemSheetCreatedbyusers")
                        .HasForeignKey("CreatedbyuserGuid")
                        .HasConstraintName("ItemSheet_createdby_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "EditbyUser")
                        .WithMany("ItemSheetEditbyUsers")
                        .HasForeignKey("EditbyUserGuid")
                        .HasConstraintName("ItemSheet_editby_user_guid_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Firstapprovalbyuser")
                        .WithMany("ItemSheetFirstapprovalbyusers")
                        .HasForeignKey("FirstapprovalbyuserGuid")
                        .HasConstraintName("ItemSheet_firstapprovalby_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.ItemType", "Itemtype")
                        .WithMany("ItemSheets")
                        .HasForeignKey("ItemtypeGuid")
                        .HasConstraintName("ItemSheet_ItemType_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Secondapprovalbyuser")
                        .WithMany("ItemSheetSecondapprovalbyusers")
                        .HasForeignKey("SecondapprovalbyuserGuid")
                        .HasConstraintName("ItemSheet_secondapprovalby_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Series", "Series")
                        .WithMany("ItemSheets")
                        .HasForeignKey("Seriesguid")
                        .HasConstraintName("fk_series_guid_item");

                    b.Navigation("Createdbyuser");

                    b.Navigation("EditbyUser");

                    b.Navigation("Firstapprovalbyuser");

                    b.Navigation("Itemtype");

                    b.Navigation("Secondapprovalbyuser");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.ItemSheetApproved", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Createdbyuser")
                        .WithMany("ItemSheetApprovedCreatedbyusers")
                        .HasForeignKey("CreatedbyuserGuid")
                        .HasConstraintName("ItemSheetApproved_createdby_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "EditbyUser")
                        .WithMany("ItemSheetApprovedEditbyUsers")
                        .HasForeignKey("EditbyUserGuid")
                        .HasConstraintName("ItemSheetApproved_editby_user_guid_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Firstapprovalbyuser")
                        .WithMany("ItemSheetApprovedFirstapprovalbyusers")
                        .HasForeignKey("FirstapprovalbyuserGuid")
                        .HasConstraintName("ItemSheetApproved_firstapprovalby_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.ItemType", "Itemtype")
                        .WithMany("ItemSheetApproveds")
                        .HasForeignKey("ItemtypeGuid")
                        .HasConstraintName("ItemSheetApproved_ItemType_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Secondapprovalbyuser")
                        .WithMany("ItemSheetApprovedSecondapprovalbyusers")
                        .HasForeignKey("SecondapprovalbyuserGuid")
                        .HasConstraintName("ItemSheetApproved_secondapprovalby_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Series", "Series")
                        .WithMany("ItemSheetApproveds")
                        .HasForeignKey("Seriesguid")
                        .HasConstraintName("fk_series_guid_itemappr");

                    b.Navigation("Createdbyuser");

                    b.Navigation("EditbyUser");

                    b.Navigation("Firstapprovalbyuser");

                    b.Navigation("Itemtype");

                    b.Navigation("Secondapprovalbyuser");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.ItemSheetApprovedTag", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.ItemSheetApproved", "Itemsheetapproved")
                        .WithMany("ItemSheetApprovedTags")
                        .HasForeignKey("ItemsheetapprovedId")
                        .IsRequired()
                        .HasConstraintName("ItemSheetApprovedTags_ItemSheetApproved_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Tag", "Tag")
                        .WithMany("ItemSheetApprovedTags")
                        .HasForeignKey("TagGuid")
                        .IsRequired()
                        .HasConstraintName("ItemSheetApprovedTags_Tag_guid");

                    b.Navigation("Itemsheetapproved");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.ItemSheetMessageAck", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.ItemSheetReviewMessage", "Itemsheetreviewmessages")
                        .WithMany("ItemSheetMessageAcks")
                        .HasForeignKey("ItemsheetreviewmessagesId")
                        .IsRequired()
                        .HasConstraintName("ItemSheetMessageAcks_ItemSheetReviewMessages_id_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "User")
                        .WithMany("ItemSheetMessageAcks")
                        .HasForeignKey("UserGuid")
                        .IsRequired()
                        .HasConstraintName("ItemSheetMessageAcks_user_guid_fkey");

                    b.Navigation("Itemsheetreviewmessages");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.ItemSheetReviewMessage", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Createdbyuser")
                        .WithMany("ItemSheetReviewMessages")
                        .HasForeignKey("CreatedbyuserGuid")
                        .HasConstraintName("ItemSheetReviewMessages_createdbyuser_guid_fkey");

                    b.Navigation("Createdbyuser");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.ItemSheetReviewSubscription", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "User")
                        .WithMany("ItemSheetReviewSubscriptions")
                        .HasForeignKey("UserGuid")
                        .IsRequired()
                        .HasConstraintName("ItemSheetReviewSubscriptions_user_guid_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.ItemSheetTag", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.ItemSheet", "Itemsheet")
                        .WithMany("ItemSheetTags")
                        .HasForeignKey("ItemsheetId")
                        .IsRequired()
                        .HasConstraintName("ItemSheetTags_ItemSheet_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Tag", "Tag")
                        .WithMany("ItemSheetTags")
                        .HasForeignKey("TagGuid")
                        .IsRequired()
                        .HasConstraintName("ItemSheetTags_Tag_guid");

                    b.Navigation("Itemsheet");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.ItemSheetVersion", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Createdbyuser")
                        .WithMany("ItemSheetVersionCreatedbyusers")
                        .HasForeignKey("CreatedbyuserGuid")
                        .HasConstraintName("ItemSheetVersion_createdby_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Firstapprovalbyuser")
                        .WithMany("ItemSheetVersionFirstapprovalbyusers")
                        .HasForeignKey("FirstapprovalbyuserGuid")
                        .HasConstraintName("ItemSheetVersion_firstapprovalby_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Secondapprovalbyuser")
                        .WithMany("ItemSheetVersionSecondapprovalbyusers")
                        .HasForeignKey("SecondapprovalbyuserGuid")
                        .HasConstraintName("ItemSheetVersion_secondapprovalby_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Series", "Series")
                        .WithMany("ItemSheetVersions")
                        .HasForeignKey("Seriesguid")
                        .HasConstraintName("fk_series_guid_itemvers");

                    b.Navigation("Createdbyuser");

                    b.Navigation("Firstapprovalbyuser");

                    b.Navigation("Secondapprovalbyuser");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.ItemUsersContact", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Createdbyuser")
                        .WithMany("ItemUsersContactCreatedbyusers")
                        .HasForeignKey("CreatedbyuserGuid")
                        .IsRequired()
                        .HasConstraintName("fk_itemuser_contact_createdby_userguid");

                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "User")
                        .WithMany("ItemUsersContactUsers")
                        .HasForeignKey("UserGuid")
                        .IsRequired()
                        .HasConstraintName("fk_itemuser_contact_userguid");

                    b.Navigation("Createdbyuser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.LarpplayerCharacterSheetAllowed", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Createdbyuser")
                        .WithMany("LarpplayerCharacterSheetAlloweds")
                        .HasForeignKey("CreatedbyuserGuid")
                        .IsRequired()
                        .HasConstraintName("LARPPlayerCharacterSheetAllowed_createdbyuser_guid_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Larp", "Larp")
                        .WithMany("LarpplayerCharacterSheetAlloweds")
                        .HasForeignKey("LarpGuid")
                        .HasConstraintName("LARPPlayerCharacterSheetAllowed_larp_guid_fkey");

                    b.Navigation("Createdbyuser");

                    b.Navigation("Larp");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.LarpplayerCharacterSheetDisllowed", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Createdbyuser")
                        .WithMany("LarpplayerCharacterSheetDislloweds")
                        .HasForeignKey("CreatedbyuserGuid")
                        .IsRequired()
                        .HasConstraintName("LARPPlayerCharacterSheetDisllowed_createdbyuser_guid_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Larp", "Larp")
                        .WithMany("LarpplayerCharacterSheetDislloweds")
                        .HasForeignKey("LarpGuid")
                        .HasConstraintName("LARPPlayerCharacterSheetDisllowed_larp_guid_fkey");

                    b.Navigation("Createdbyuser");

                    b.Navigation("Larp");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.LarpplayerSeriesAllowed", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Createdbyuser")
                        .WithMany("LarpplayerSeriesAlloweds")
                        .HasForeignKey("CreatedbyuserGuid")
                        .IsRequired()
                        .HasConstraintName("LARPPlayerSeriesAllowed_createdbyuser_guid_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Larp", "Larp")
                        .WithMany("LarpplayerSeriesAlloweds")
                        .HasForeignKey("LarpGuid")
                        .HasConstraintName("LARPPlayerSeriesAllowed_larp_guid_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Series", "Series")
                        .WithMany("LarpplayerSeriesAlloweds")
                        .HasForeignKey("SeriesGuid")
                        .IsRequired()
                        .HasConstraintName("LARPPlayerSeriesAllowed_series_guid_fkey");

                    b.Navigation("Createdbyuser");

                    b.Navigation("Larp");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.LarpplayerSeriesDisllowed", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Createdbyuser")
                        .WithMany("LarpplayerSeriesDislloweds")
                        .HasForeignKey("CreatedbyuserGuid")
                        .IsRequired()
                        .HasConstraintName("LARPPlayerSeriesDisllowed_createdbyuser_guid_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Larp", "Larp")
                        .WithMany("LarpplayerSeriesDislloweds")
                        .HasForeignKey("LarpGuid")
                        .HasConstraintName("LARPPlayerSeriesDisllowed_larp_guid_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Series", "Series")
                        .WithMany("LarpplayerSeriesDislloweds")
                        .HasForeignKey("SeriesGuid")
                        .IsRequired()
                        .HasConstraintName("LARPPlayerSeriesDisllowed_series_guid_fkey");

                    b.Navigation("Createdbyuser");

                    b.Navigation("Larp");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.LarpplayerTagAllowed", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Createdbyuser")
                        .WithMany("LarpplayerTagAlloweds")
                        .HasForeignKey("CreatedbyuserGuid")
                        .IsRequired()
                        .HasConstraintName("LARPPlayerTagAllowed_createdbyuser_guid_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Larp", "Larp")
                        .WithMany("LarpplayerTagAlloweds")
                        .HasForeignKey("LarpGuid")
                        .IsRequired()
                        .HasConstraintName("LARPPlayerTagAllowed_larp_guid_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Tag", "Tag")
                        .WithMany("LarpplayerTagAlloweds")
                        .HasForeignKey("TagGuid")
                        .IsRequired()
                        .HasConstraintName("LARPPlayerTagAllowed_tag_guid_fkey");

                    b.Navigation("Createdbyuser");

                    b.Navigation("Larp");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.LarpplayerTagDisllowed", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Createdbyuser")
                        .WithMany("LarpplayerTagDislloweds")
                        .HasForeignKey("CreatedbyuserGuid")
                        .IsRequired()
                        .HasConstraintName("LARPPlayerTagDisllowed_createdbyuser_guid_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Larp", "Larp")
                        .WithMany("LarpplayerTagDislloweds")
                        .HasForeignKey("LarpGuid")
                        .IsRequired()
                        .HasConstraintName("LARPPlayerTagDisllowed_larp_guid_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Tag", "Tag")
                        .WithMany("LarpplayerTagDislloweds")
                        .HasForeignKey("TagGuid")
                        .IsRequired()
                        .HasConstraintName("LARPPlayerTagDisllowed_tag_guid_fkey");

                    b.Navigation("Createdbyuser");

                    b.Navigation("Larp");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.Larprun", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Createdbyuser")
                        .WithMany("Larpruns")
                        .HasForeignKey("CreatedbyuserGuid")
                        .IsRequired()
                        .HasConstraintName("LARPRuns_createdbyuser_guid_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Larp", "Larp")
                        .WithMany("Larpruns")
                        .HasForeignKey("LarpGuid")
                        .IsRequired()
                        .HasConstraintName("LARPRuns_larp_guid_fkey");

                    b.Navigation("Createdbyuser");

                    b.Navigation("Larp");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.LarprunPreReg", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "CharactersheetRegisteredApprovedbyUserNavigation")
                        .WithMany("LarprunPreRegCharactersheetRegisteredApprovedbyUserNavigations")
                        .HasForeignKey("CharactersheetRegisteredApprovedbyUser")
                        .HasConstraintName("LARPRunPreReg_charactersheet_registered_approvedby_user_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Larprun", "Larprun")
                        .WithMany("LarprunPreRegs")
                        .HasForeignKey("LarprunGuid")
                        .IsRequired()
                        .HasConstraintName("LARPRunPreReg_larprun_guid_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "User")
                        .WithMany("LarprunPreRegUsers")
                        .HasForeignKey("UserGuid")
                        .IsRequired()
                        .HasConstraintName("LARPRunPreReg_user_guid_fkey");

                    b.Navigation("CharactersheetRegisteredApprovedbyUserNavigation");

                    b.Navigation("Larprun");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.Larptag", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.Larp", "Larp")
                        .WithMany("Larptags")
                        .HasForeignKey("Larpguid")
                        .HasConstraintName("LARPTags_larpguid_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Tag", "Tag")
                        .WithMany("Larptags")
                        .HasForeignKey("Tagguid")
                        .HasConstraintName("LARPTags_tagguid_fkey");

                    b.Navigation("Larp");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.SeriesTag", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.Series", "Series")
                        .WithMany("SeriesTags")
                        .HasForeignKey("SeriesGuid")
                        .IsRequired()
                        .HasConstraintName("SeriesTags_CharacterSheet_Guid_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Tag", "Tag")
                        .WithMany("SeriesTags")
                        .HasForeignKey("TagGuid")
                        .IsRequired()
                        .HasConstraintName("SeriesTags_Tag_guid");

                    b.Navigation("Series");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.SheetUsersContact", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "Createdbyuser")
                        .WithMany("SheetUsersContactCreatedbyusers")
                        .HasForeignKey("CreatedbyuserGuid")
                        .IsRequired()
                        .HasConstraintName("fk_sheetuser_contact_createdby_userguid");

                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "User")
                        .WithMany("SheetUsersContactUsers")
                        .HasForeignKey("UserGuid")
                        .IsRequired()
                        .HasConstraintName("fk_sheetuser_contact_userguid");

                    b.Navigation("Createdbyuser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.Tag", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "ApprovedbyUser")
                        .WithMany("Tags")
                        .HasForeignKey("ApprovedbyUserGuid")
                        .HasConstraintName("Tags_approvedby_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.TagType", "Tagtype")
                        .WithMany("Tags")
                        .HasForeignKey("Tagtypeguid")
                        .IsRequired()
                        .HasConstraintName("fk_tagtype_guid_tags");

                    b.Navigation("ApprovedbyUser");

                    b.Navigation("Tagtype");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.User", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.Pronoun", "Pronouns")
                        .WithMany("Users")
                        .HasForeignKey("Pronounsguid")
                        .HasConstraintName("fk_pronouns_guid_user");

                    b.Navigation("Pronouns");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.UserLarprole", b =>
                {
                    b.HasOne("NEXUSDataLayerScaffold.Models.Larp", "Larp")
                        .WithMany("UserLarproles")
                        .HasForeignKey("Larpguid")
                        .HasConstraintName("UserLARPRoles_larpguid_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.Role", "Role")
                        .WithMany("UserLarproles")
                        .HasForeignKey("Roleid")
                        .HasConstraintName("UserLARPRoles_roleid_fkey");

                    b.HasOne("NEXUSDataLayerScaffold.Models.User", "User")
                        .WithMany("UserLarproles")
                        .HasForeignKey("Userguid")
                        .HasConstraintName("UserLARPRoles_userguid_fkey");

                    b.Navigation("Larp");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.CharacterSheet", b =>
                {
                    b.Navigation("CharacterSheetApproveds");

                    b.Navigation("CharacterSheetTags");

                    b.Navigation("CharacterSheetVersions");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.CharacterSheetApproved", b =>
                {
                    b.Navigation("CharacterSheetApprovedTags");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.CharacterSheetReviewMessage", b =>
                {
                    b.Navigation("CharacterSheetMessageAcks");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.ItemSheet", b =>
                {
                    b.Navigation("ItemSheetTags");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.ItemSheetApproved", b =>
                {
                    b.Navigation("ItemSheetApprovedTags");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.ItemSheetReviewMessage", b =>
                {
                    b.Navigation("ItemSheetMessageAcks");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.ItemType", b =>
                {
                    b.Navigation("ItemSheetApproveds");

                    b.Navigation("ItemSheets");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.Larp", b =>
                {
                    b.Navigation("LarpplayerCharacterSheetAlloweds");

                    b.Navigation("LarpplayerCharacterSheetDislloweds");

                    b.Navigation("LarpplayerSeriesAlloweds");

                    b.Navigation("LarpplayerSeriesDislloweds");

                    b.Navigation("LarpplayerTagAlloweds");

                    b.Navigation("LarpplayerTagDislloweds");

                    b.Navigation("Larpruns");

                    b.Navigation("Larptags");

                    b.Navigation("UserLarproles");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.Larprun", b =>
                {
                    b.Navigation("LarprunPreRegs");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.Pronoun", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.Role", b =>
                {
                    b.Navigation("UserLarproles");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.Series", b =>
                {
                    b.Navigation("CharacterSheetApproveds");

                    b.Navigation("CharacterSheetVersions");

                    b.Navigation("CharacterSheets");

                    b.Navigation("ItemSheetApproveds");

                    b.Navigation("ItemSheetVersions");

                    b.Navigation("ItemSheets");

                    b.Navigation("LarpplayerSeriesAlloweds");

                    b.Navigation("LarpplayerSeriesDislloweds");

                    b.Navigation("SeriesTags");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.Tag", b =>
                {
                    b.Navigation("CharacterSheetApprovedTags");

                    b.Navigation("CharacterSheetTags");

                    b.Navigation("ItemSheetApprovedTags");

                    b.Navigation("ItemSheetTags");

                    b.Navigation("LarpplayerTagAlloweds");

                    b.Navigation("LarpplayerTagDislloweds");

                    b.Navigation("Larptags");

                    b.Navigation("SeriesTags");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.TagType", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("NEXUSDataLayerScaffold.Models.User", b =>
                {
                    b.Navigation("CharacterSheetApprovedCreatedbyusers");

                    b.Navigation("CharacterSheetApprovedEditbyUsers");

                    b.Navigation("CharacterSheetApprovedFirstapprovalbyusers");

                    b.Navigation("CharacterSheetApprovedSecondapprovalbyusers");

                    b.Navigation("CharacterSheetCreatedbyusers");

                    b.Navigation("CharacterSheetEditbyUsers");

                    b.Navigation("CharacterSheetFirstapprovalbyusers");

                    b.Navigation("CharacterSheetMessageAcks");

                    b.Navigation("CharacterSheetReviewMessages");

                    b.Navigation("CharacterSheetReviewSubscriptions");

                    b.Navigation("CharacterSheetSecondapprovalbyusers");

                    b.Navigation("CharacterSheetVersionCreatedbyusers");

                    b.Navigation("CharacterSheetVersionFirstapprovalbyusers");

                    b.Navigation("CharacterSheetVersionSecondapprovalbyusers");

                    b.Navigation("ItemSheetApprovedCreatedbyusers");

                    b.Navigation("ItemSheetApprovedEditbyUsers");

                    b.Navigation("ItemSheetApprovedFirstapprovalbyusers");

                    b.Navigation("ItemSheetApprovedSecondapprovalbyusers");

                    b.Navigation("ItemSheetCreatedbyusers");

                    b.Navigation("ItemSheetEditbyUsers");

                    b.Navigation("ItemSheetFirstapprovalbyusers");

                    b.Navigation("ItemSheetMessageAcks");

                    b.Navigation("ItemSheetReviewMessages");

                    b.Navigation("ItemSheetReviewSubscriptions");

                    b.Navigation("ItemSheetSecondapprovalbyusers");

                    b.Navigation("ItemSheetVersionCreatedbyusers");

                    b.Navigation("ItemSheetVersionFirstapprovalbyusers");

                    b.Navigation("ItemSheetVersionSecondapprovalbyusers");

                    b.Navigation("ItemUsersContactCreatedbyusers");

                    b.Navigation("ItemUsersContactUsers");

                    b.Navigation("LarpplayerCharacterSheetAlloweds");

                    b.Navigation("LarpplayerCharacterSheetDislloweds");

                    b.Navigation("LarpplayerSeriesAlloweds");

                    b.Navigation("LarpplayerSeriesDislloweds");

                    b.Navigation("LarpplayerTagAlloweds");

                    b.Navigation("LarpplayerTagDislloweds");

                    b.Navigation("LarprunPreRegCharactersheetRegisteredApprovedbyUserNavigations");

                    b.Navigation("LarprunPreRegUsers");

                    b.Navigation("Larpruns");

                    b.Navigation("SheetUsersContactCreatedbyusers");

                    b.Navigation("SheetUsersContactUsers");

                    b.Navigation("Tags");

                    b.Navigation("UserLarproles");
                });
#pragma warning restore 612, 618
        }
    }
}
